package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

import model.Board;

//import view.BoardPanel.MoveKeyListener;

/**
 * Main GUI for tetris sets up frame and other Panels.
 * 
 * @author Lindsee Purnell
 * @version tetris1.0
 */
public class TetrisGUI {
    
    /** Magic number 50. */
    private static final int FIFTY = 50; 
    
    /** Magic number 300. */
    private static final int THREE_HUNDRED = 300; 
    
    /** Magic number 200. */
    private static final int TWO_HUNDRED = 200;
    
    /** Font size. */
    private static final int FONT_SIZE = 12; 
    
    /** Up arrow unicode. */
    private static final char UP = '\u2B61';
  
    /** Down arrow unicode. */
    private static final char DOWN = '\u2B63';
    
    /** Right arrow unicode. */
    private static final char RIGHT = '\u2B62';
    
    /** Left arrow unicode. */
    private static final char LEFT = '\u2B60';
    
    /**Background color. */
    private static final Color DARK_PURPLE = new Color(28, 0, 38); 
    
    /**Border color. */
    private static final Color WHITE = new Color(255, 255, 255); 
    
    /** Empty border for padding. */
    private final Border myEmptyBorder = BorderFactory.createEmptyBorder(50, 50, 50, 50);
    
    /** Line Border. */ 
    private final Border myLineBorder = BorderFactory.createLineBorder(WHITE, 3);
    
    /** Default font used. */ 
    private final Font myFont = new Font("Monospace", Font.BOLD, FONT_SIZE);
    
    /**JFrame width. */
    private final int myWidth = 800; 
    
    /** JFrame height. */
    private final int myHeight = 800; 
    
    /** JFrame with title. */
    private final JFrame myMainFrame = new JFrame("Tetris"); 
        
    /** List of Labels. */
    private final List<JLabel> myLabelList = new ArrayList<>(); 
    
    /** 
     * Method to start the creation of the GUI. 
     */
    public void start() {
        final Board board = new Board();
        final BoardPanel boardPanel = new BoardPanel(board); 
        final ScorePanel scorePanel = new ScorePanel(); 
        board.addObserver(boardPanel);
        board.addObserver(scorePanel);
        
        myMainFrame.setSize(myWidth, myHeight);
        myMainFrame.setResizable(false);
        myMainFrame.getContentPane().setBackground(DARK_PURPLE);
        myMainFrame.setVisible(true);
        myMainFrame.setLayout(new BorderLayout());
        myMainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myMainFrame.add(boardPanel, BorderLayout.CENTER);
        setEastPanel(scorePanel); 
        panelDialog(); 

    }
    
    private void panelDialog() {
        final Object[] options = {"Small", "Medium", "Large"}; 
        final int choice = JOptionPane.showOptionDialog(myMainFrame, 
                           "Please choose a board size: ", "Tetris board option", 
                           JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.DEFAULT_OPTION,
                            null, options, options[1]);
        System.out.println(choice);
    }
    
    /**
     * Method to create Panel in the East of the GUI. 
     */
    private void setEastPanel(final JPanel sPanel) {
        final JComponent eastPanel = new JPanel(); 
        final BoxLayout boxLayout = new BoxLayout(eastPanel, BoxLayout.PAGE_AXIS); 
        eastPanel.setLayout(boxLayout);
        eastPanel.setBackground(DARK_PURPLE);
        
        eastPanel.add(setNextPanel()); 
        
        eastPanel.add(Box.createVerticalStrut(FIFTY)); 
        
        final TitledBorder myTitleBorder = BorderFactory.createTitledBorder(myLineBorder, 
              " Score: ", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.CENTER); 
        
        myTitleBorder.setTitleColor(WHITE);
        myTitleBorder.setTitleFont(myFont);
        sPanel.setBorder(BorderFactory.createCompoundBorder(myEmptyBorder, myTitleBorder));
        
        eastPanel.add(sPanel); 
        
        eastPanel.add(Box.createVerticalStrut(FIFTY));
        
        //eastPanel.add(new InstructionPanel());
        
        eastPanel.add(setInstructions());
        
        myMainFrame.add(eastPanel, BorderLayout.EAST); 
        
    }
    
    /**
     * JPanel to create Instruction Panel on
     * how to play the game. 
     * 
     * @return instructions Panel
     */
    private JPanel setInstructions() {
        final JPanel instructPanel = new JPanel(); 
        instructPanel.setPreferredSize(new Dimension(THREE_HUNDRED, 100));
        final TitledBorder titleBorder = BorderFactory.createTitledBorder(myLineBorder, 
             " How to play: ", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.CENTER); 
        titleBorder.setTitleColor(WHITE);
        titleBorder.setTitleFont(myFont);
        instructPanel.setBorder(
                  BorderFactory.createCompoundBorder(myEmptyBorder, titleBorder));
        final BoxLayout boxLayout = new BoxLayout(instructPanel, BoxLayout.PAGE_AXIS); 
        instructPanel.setLayout(boxLayout);
        instructPanel.setBackground(DARK_PURPLE); 
        
        //JTextArea
        final JTextArea text = new JTextArea(); 
        text.setEditable(false);
        text.setText("Move right: " + RIGHT + " or D\nRotate: " + UP + " or W"
            + "\nMove left: " + LEFT + " or A\n" + "Speed down: " + DOWN +  " or S");
        text.setForeground(WHITE);
        text.setBackground(DARK_PURPLE);
        text.setFont(myFont); 
        instructPanel.add(text); 

        return instructPanel; 
    }
    
    /**
     * Helper method to show the next tetris
     * piece to be in play. 
     * 
     * @return upNextPanel. 
     */
    private JPanel setNextPanel() {
        final JPanel upNextPanel = new JPanel(); 
        upNextPanel.setBackground(DARK_PURPLE);
        upNextPanel.setPreferredSize(new Dimension(TWO_HUNDRED, TWO_HUNDRED));
        final Border emptyBorder = BorderFactory.createEmptyBorder(50, 50, 50, 50);

        upNextPanel.setBorder(BorderFactory.createCompoundBorder(emptyBorder, myLineBorder));
        return upNextPanel; 
    }
//    Dont delete yet could be useful in part B
    
//    private class InstructionPanel extends JPanel {
//        
//        private final int WIDTH = 300; 
//        
//        private final int HEIGHT = 400; 
//        
//        private String instruct = "How to play:";
//        
//        private String right = "Move right: Right arrow key or D";
//        
//        private String rotate = "Rotate: Up arrow key or W";
//        
//        private String left = "Move left: Left arrow key or A";
//        
//        private String down = "Speed down: Down arrow key or S"; 
//        
//        public InstructionPanel() {
//            super();
//            setPreferredSize(new Dimension(WIDTH, HEIGHT));
//            setBorder(BorderFactory.createEmptyBorder(50, 50, 50, 50));
//            setBackground(DARK_PURPLE); 
//        }
//        
//        @Override
//        public void paintComponent(final Graphics theGraphics) {
//            super.paintComponent(theGraphics); 
//            final Graphics2D g2d = (Graphics2D) theGraphics; 
//            
//            g2d.setFont(new Font("Monospace", Font.BOLD, 14));
//            g2d.setColor(WHITE);
//            g2d.drawString(instruct, WIDTH / 2, HEIGHT / 5);
//            
//            
//        }
//    }
    

}
