package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.Border;
import model.Board;

/**
 * 
 * @author Lindsee Purnell
 * @version Tetris1.0
 */
public class BoardPanel extends JPanel implements Observer {
   
    /** serial ID. */
    private static final long serialVersionUID = -7701057436252781405L;
    
    /** Magic number 50. */
    private static final int FIFTY = 50; 

    /** Magic number 1000. */
    private static final int ONE_THOUSAND = 1000;
    
    /** Background Color of GUI and Panels. */
    private static final Color DARK_PURPLE = new Color(28, 0, 38); 
    
//    /** Alternative Background Color. */
//    private static final Color BLACK = new Color(1, 3, 8); 
    
    /** Border Color. */
    private static final Color WHITE = new Color(255, 255, 255); 
    
    /** Instance of Board class. */ 
    public final Board myBoard; 
    
    /** Empty border for padding. */
    private final Border myEmptyBorder = BorderFactory.createEmptyBorder(50, 50, 50, 50);
    
//    /** Lined border. */
//    private final Border myLineBorder = BorderFactory.createLineBorder(WHITE, 3);
    
    /** Timer for movement of pieces and speed of game. */
    private final Timer myTimer; 
    
    /** Width of panel. */
    private final int myWidth = 250;
    
    /** Height of panel. */
    private final int myHeight = 575; 
    
    /**Size of tetris individual blocks. */
    private int myBlockSize; 
    
//    private Map<Character, ArrayList<Color>> myTetrisPieces; 
    /** HashMap to help design Tetris pieces. */
    private Map<Character, Color> myTetrisPieces; 
    
    
    /** String for boards toString. */
    private String myCurrentBoardString; 
    
    /** 
     * Constructor for BoardPanel calls
     * parent JPanel. 
     */
    public BoardPanel() {
        super(); 
        myBoard = new Board(); 
     
        setPreferredSize(new Dimension(myWidth, myHeight)); 
        setBackground(DARK_PURPLE); 
        setBorder(myEmptyBorder); 
        setFocusable(true); 
        addKeyListener(new MoveKeyListener()); 
        
        myTimer = new Timer(ONE_THOUSAND, new TimeListener()); 
       
        
        myBlockSize = myWidth / myBoard.getWidth();
        
        initialize(); 

        
    }
    
    /** Helper method to initialize other methods. */
    private void initialize() {
        getTetrisPieces(); 
        myBoard.newGame();
        myTimer.start();
    }
    
    /**
     * Method that populates and returns hashmap of designed tetris
     * pieces. 
     * @return myTetrisPieces hashmap. 
     */
    private Map<Character, Color> getTetrisPieces() {
        
        myTetrisPieces = new HashMap<>(); 
        final Color brightOrange = new Color(219, 65, 0); 
        final Color lightBlue = new Color(96, 255, 233); 
        final Color magenta = new Color(246, 92, 235); 
        final Color lightGreen = new Color(65, 219, 0);
        final Color brightYellow = new Color(255, 255, 119);
        final Color brightRed = new Color(255, 0, 0);
        final Color darkBlue = new Color(31, 0, 246); 
        
        myTetrisPieces.put('I', lightBlue);
        myTetrisPieces.put('J', darkBlue);
        myTetrisPieces.put('L', brightOrange);
        myTetrisPieces.put('O', brightYellow);
        myTetrisPieces.put('S', lightGreen);
        myTetrisPieces.put('T', magenta);
        myTetrisPieces.put('Z', brightRed);
        
        return myTetrisPieces; 
    }
    
    /** Just calls repaint for now. */
    @Override
    public void update(final Observable theObj, final Object theArg) { 

        if (theArg instanceof String) {
            myCurrentBoardString = (String) theArg; 
            final String[] myStringArray = myCurrentBoardString.split("|\n"); 
            for (int i = 0; i < myStringArray.length; i++) {
                System.out.println(myStringArray[i]);
            }
            repaint(); 
        }
        
    }
    
    /** Designs border and tetris pieces. */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics; 
        final int thick = 8;
        g2d.setColor(WHITE);
        g2d.drawRect(FIFTY, FIFTY, myWidth, myHeight);
        g2d.setStroke(new BasicStroke(thick));
        
//        String[] myStringArray = myCurrentBoardString.split("\n");
//        
//        for (int i = 0; i < myStringArray.length; i++) {
//            System.out.print(myStringArray[i]); 
//        }
//        
        //g2d.drawString(currentBoardString, 50, 50); 
         
        //System.out.println(myCurrentBoardString); 
        
        int row = 0;
        int col = 0;
        
//        for (final char c : myCurrentBoardString.toCharArray()) {
//            
//            if (myTetrisPieces.containsKey(c)) {
//               // final Rectangle rect = new Rectangle(col * myBlockSize, row * myBlockSize, 
//                                                  //  myBlockSize, myBlockSize);
//                g2d.setColor(myTetrisPieces.get(c));
//                //g2d.draw(rect);
//               // g2d.setColor(myTetrisPieces.get(c).get(1));
//                g2d.fillRect(col * myBlockSize, row * myBlockSize, 
//                             myBlockSize, myBlockSize);
//            }
//            
//            if (c == '\n') {
//                col = 0;
//                row++;
//            }
//            col++; 
//        }
        
    }
    
   /**
    * Private inner class to move the pieces from 
    * key presses. 
    * 
    * @author Lindsee Purnell
    * @version Tetris1.0
    */
    private class MoveKeyListener extends KeyAdapter {
        
        public void keyPressed(final KeyEvent theEvent) {
            if (theEvent.getKeyCode() == KeyEvent.VK_UP
                            || theEvent.getKeyCode() == KeyEvent.VK_W) {
                myBoard.rotate();
                
            } else if (theEvent.getKeyCode() == KeyEvent.VK_RIGHT
                            || theEvent.getKeyCode() == KeyEvent.VK_D) {
                myBoard.right();
                
            } else if (theEvent.getKeyCode() == KeyEvent.VK_LEFT
                            || theEvent.getKeyCode() == KeyEvent.VK_A) {
                
                myBoard.left();
                
            } else if (theEvent.getKeyCode() == KeyEvent.VK_DOWN
                            || theEvent.getKeyCode() == KeyEvent.VK_S) {
                myBoard.down();
            }
        }
    }// End MoveKeyListener
    
    /**
     * Inner class for timer action.
     * 
     * @author lindsee Purnell
     * @version Tetris1.0 
     */
    private class TimeListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            // Keep falling 
            myBoard.down(); 
            //repaint();
        }
        
    }
}
